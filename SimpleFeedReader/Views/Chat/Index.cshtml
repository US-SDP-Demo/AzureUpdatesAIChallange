@model SimpleFeedReader.ViewModels.ChatViewModel
@{
    ViewData["Title"] = "AI Chat";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <link href="~/css/chat.css" rel="stylesheet" />
}

<div class="chat-wrapper">
    <div class="chat-container">
        <!-- Chat Content -->
        <div class="chat-content">
            <div id="chatMessages" class="chat-messages">
                @if (!Model.Messages.Any())
                {
                    <!-- Welcome State -->
                    <div class="welcome-state">
                        <div class="welcome-icon">
                            <svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="1.5"/>
                                <circle cx="12" cy="12" r="6" stroke="currentColor" stroke-width="1.5"/>
                                <circle cx="12" cy="12" r="2" fill="currentColor"/>
                            </svg>
                        </div>
                        <h2 class="welcome-title">Start chatting</h2>
                        <p class="welcome-subtitle">This chatbot is configured to answer your questions</p>
                    </div>
                }
                else
                {
                    @foreach (var message in Model.Messages)
                    {
                        <div class="message @(message.IsFromUser ? "user-message" : "assistant-message")">
                            <div class="message-content">
                                <div class="message-text">@message.Content</div>
                                <div class="message-time">@message.Timestamp.ToString("HH:mm")</div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Input Area -->
        <div class="chat-input-area">
            <div class="input-container">
                <button class="new-chat-btn" title="New chat">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M12 5v14m-7-7h14" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </button>
                <div class="input-wrapper">
                    <input 
                        type="text" 
                        id="messageInput" 
                        class="message-input" 
                        placeholder="Type a new question..." 
                        maxlength="500"
                    />
                    <button class="send-btn" id="sendButton" type="button">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M22 2L11 13M22 2L15 22L11 13M22 2L2 9L11 13" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Sidebar (hidden by default) -->
    <div class="chat-sidebar" id="chatSidebar">
        <div class="sidebar-header">
            <h3>Chat history</h3>
            <button class="close-sidebar-btn" id="closeSidebarBtn">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M18 6L6 18M6 6l12 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </button>
        </div>
        <div class="sidebar-content">
            <div class="sidebar-section">
                <h4>Recent</h4>
            </div>
            <div class="sidebar-section">
                <h4>Products available</h4>
            </div>
            <div class="sidebar-section">
                <h4>Product Offerings</h4>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');
    const chatMessages = document.getElementById('chatMessages');
    const historyBtn = document.getElementById('historyBtn');
    const chatSidebar = document.getElementById('chatSidebar');
    const closeSidebarBtn = document.getElementById('closeSidebarBtn');
    const newChatBtn = document.querySelector('.new-chat-btn');
    
    let isTyping = false;
    
    function scrollToBottom() {
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    
    function addMessage(content, isFromUser) {
        const timestamp = new Date().toLocaleTimeString('en-US', { 
            hour12: false, 
            hour: '2-digit', 
            minute: '2-digit' 
        });
        
        // Remove welcome state if it exists
        const welcomeState = document.querySelector('.welcome-state');
        if (welcomeState) {
            welcomeState.remove();
        }
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${isFromUser ? 'user-message' : 'assistant-message'}`;
        
        messageDiv.innerHTML = `
            <div class="message-content">
                <div class="message-text">${content}</div>
                <div class="message-time">${timestamp}</div>
            </div>
        `;
        
        chatMessages.appendChild(messageDiv);
        scrollToBottom();
    }
    
    function showTypingIndicator() {
        // Remove any existing typing indicator
        const existingIndicator = document.getElementById('typingIndicator');
        if (existingIndicator) {
            existingIndicator.remove();
        }
        
        // Create and append new typing indicator
        const typingDiv = document.createElement('div');
        typingDiv.id = 'typingIndicator';
        typingDiv.className = 'typing-indicator';
        typingDiv.innerHTML = `
            <div class="typing-dots">
                <span></span>
                <span></span>
                <span></span>
            </div>
        `;
        
        chatMessages.appendChild(typingDiv);
        isTyping = true;
        scrollToBottom();
    }
    
    function hideTypingIndicator() {
        const typingIndicator = document.getElementById('typingIndicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
        isTyping = false;
    }
    
    function disableInput() {
        messageInput.disabled = true;
        sendButton.disabled = true;
    }
    
    function enableInput() {
        messageInput.disabled = false;
        sendButton.disabled = false;
        messageInput.focus();
    }
    
    async function sendMessage() {
        const message = messageInput.value.trim();
        if (!message) return;
        
        // Add user message
        addMessage(message, true);
        
        // Clear input and disable controls
        messageInput.value = '';
        disableInput();
        showTypingIndicator();
        
        try {
            const response = await fetch('/Chat/SendMessage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(message)
            });
            
            const data = await response.json();
            
            hideTypingIndicator();
            
            if (data.success) {
                addMessage(data.response, false);
            } else {
                addMessage('Sorry, I encountered an error. Please try again.', false);
            }
        } catch (error) {
            hideTypingIndicator();
            addMessage('Sorry, I encountered a network error. Please try again.', false);
        } finally {
            enableInput();
        }
    }
    
    // Event listeners
    sendButton.addEventListener('click', sendMessage);
    
    messageInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
    
    historyBtn.addEventListener('click', function() {
        chatSidebar.classList.toggle('open');
    });
    
    closeSidebarBtn.addEventListener('click', function() {
        chatSidebar.classList.remove('open');
    });
    
    newChatBtn.addEventListener('click', function() {
        // Clear chat messages and show welcome state
        chatMessages.innerHTML = `
            <div class="welcome-state">
                <div class="welcome-icon">
                    <svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="1.5"/>
                        <circle cx="12" cy="12" r="6" stroke="currentColor" stroke-width="1.5"/>
                        <circle cx="12" cy="12" r="2" fill="currentColor"/>
                    </svg>
                </div>
                <h2 class="welcome-title">Start chatting</h2>
                <p class="welcome-subtitle">This chatbot is configured to answer your questions</p>
            </div>
        `;
        messageInput.focus();
    });
    
    // Auto-focus on the input
    messageInput.focus();
    
    // Initial scroll to bottom
    scrollToBottom();
});
</script>
