@model SimpleFeedReader.ViewModels.ChatViewModel
@{
    ViewData["Title"] = "AI Chat";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">
                        <i class="fas fa-robot me-2"></i>AI Chat Assistant
                    </h4>
                </div>
                <div class="card-body p-0">
                    <div id="chatContainer" class="chat-container" style="height: 400px; overflow-y: auto; padding: 15px;">
                        @foreach (var message in Model.Messages)
                        {
                            <div class="message @(message.IsFromUser ? "user-message" : "bot-message") mb-3">
                                <div class="message-content p-3 rounded @(message.IsFromUser ? "bg-primary text-white ms-auto" : "bg-light")">
                                    <div class="message-text">@message.Content</div>
                                    <small class="message-time d-block mt-1 @(message.IsFromUser ? "text-white-50" : "text-muted")">
                                        @message.Timestamp.ToString("HH:mm")
                                    </small>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="card-footer">
                    <div class="input-group">
                        <input type="text" id="messageInput" class="form-control" placeholder="Type your message..." maxlength="500">
                        <button class="btn btn-primary" type="button" id="sendButton">
                            <i class="fas fa-paper-plane"></i> Send
                        </button>
                    </div>
                    <div id="typingIndicator" class="typing-indicator mt-2" style="display: none;">
                        <small class="text-muted">
                            <i class="fas fa-circle-notch fa-spin"></i> AI is typing...
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .chat-container {
        background: #f8f9fa;
    }
    
    .message {
        display: flex;
        align-items: flex-end;
    }
    
    .user-message {
        justify-content: flex-end;
    }
    
    .bot-message {
        justify-content: flex-start;
    }
    
    .message-content {
        max-width: 80%;
        word-wrap: break-word;
    }
    
    .user-message .message-content {
        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
    }
    
    .bot-message .message-content {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
    }
    
    .message-time {
        font-size: 0.75rem;
    }
    
    .typing-indicator {
        height: 20px;
    }
    
    #messageInput:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }
    
    .btn-primary {
        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
        border: none;
    }
    
    .btn-primary:hover {
        background: linear-gradient(135deg, #0056b3 0%, #004085 100%);
        transform: translateY(-1px);
    }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');
    const chatContainer = document.getElementById('chatContainer');
    const typingIndicator = document.getElementById('typingIndicator');
    
    let isTyping = false;
    
    function scrollToBottom() {
        chatContainer.scrollTop = chatContainer.scrollHeight;
    }
    
    function addMessage(content, isFromUser) {
        const timestamp = new Date().toLocaleTimeString('en-US', { 
            hour12: false, 
            hour: '2-digit', 
            minute: '2-digit' 
        });
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${isFromUser ? 'user-message' : 'bot-message'} mb-3`;
        
        messageDiv.innerHTML = `
            <div class="message-content p-3 rounded ${isFromUser ? 'bg-primary text-white ms-auto' : 'bg-light'}">
                <div class="message-text">${content}</div>
                <small class="message-time d-block mt-1 ${isFromUser ? 'text-white-50' : 'text-muted'}">
                    ${timestamp}
                </small>
            </div>
        `;
        
        chatContainer.appendChild(messageDiv);
        scrollToBottom();
    }
    
    function showTypingIndicator() {
        isTyping = true;
        typingIndicator.style.display = 'block';
        scrollToBottom();
    }
    
    function hideTypingIndicator() {
        isTyping = false;
        typingIndicator.style.display = 'none';
    }
    
    function disableInput() {
        messageInput.disabled = true;
        sendButton.disabled = true;
        sendButton.innerHTML = '<i class="fas fa-circle-notch fa-spin"></i> Sending...';
    }
    
    function enableInput() {
        messageInput.disabled = false;
        sendButton.disabled = false;
        sendButton.innerHTML = '<i class="fas fa-paper-plane"></i> Send';
        messageInput.focus();
    }
    
    async function sendMessage() {
        const message = messageInput.value.trim();
        if (!message) return;
        
        // Add user message
        addMessage(message, true);
        
        // Clear input and disable controls
        messageInput.value = '';
        disableInput();
        showTypingIndicator();
        
        try {
            const response = await fetch('/Chat/SendMessage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(message)
            });
            
            const data = await response.json();
            
            hideTypingIndicator();
            
            if (data.success) {
                addMessage(data.response, false);
            } else {
                addMessage('Sorry, I encountered an error. Please try again.', false);
            }
        } catch (error) {
            hideTypingIndicator();
            addMessage('Sorry, I encountered a network error. Please try again.', false);
        } finally {
            enableInput();
        }
    }
    
    sendButton.addEventListener('click', sendMessage);
    
    messageInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
    
    // Auto-focus on the input
    messageInput.focus();
    
    // Initial scroll to bottom
    scrollToBottom();
});
</script>
